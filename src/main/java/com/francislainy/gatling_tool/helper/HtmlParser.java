package com.francislainy.gatling_tool.helper;

import org.jsoup.Jsoup;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HtmlParser {

    public static void main(String[] args) {
        try {
            Document document =
                    Jsoup.parse(new File("/Users/camposf/IdeaProjects/gatling_tool/index2.html"), "utf-8");
            Elements scriptElements = document.getElementsByTag("script");

            for (Element element : scriptElements) {
                for (DataNode node : element.dataNodes()) {
                    String wholeData = node.getWholeData();
//                    System.out.println(node.getWholeData());

//                    String str = "var timestamp = 1591609422149;";
//                    Pattern pattern = Pattern.compile("var timestamp = (.*?);", Pattern.DOTALL);
//
//                    Matcher matcher = pattern.matcher(wholeData);
//                    while (matcher.find()) {
////                        System.out.println(matcher.group(1));
//                    }

                    String series = "series: [\n" +
                            "                {\n" +
                            "\n" +
                            "                    data: [\n" +
                            "                        [1591609424000,1],[1591609425000,1],[1591609426000,1],[1591609427000,1],[1591609428000,1],[1591609429000,1],[1591609430000,1],[1591609431000,1],[1591609432000,1],[1591609433000,1],[1591609434000,1],[1591609435000,1],[1591609436000,1],[1591609437000,1],[1591609438000,1],[1591609439000,1],[1591609440000,1],[1591609441000,1],[1591609442000,1],[1591609443000,1],[1591609444000,1],[1591609445000,1],[1591609446000,1],[1591609447000,1],[1591609448000,2],[1591609449000,2],[1591609450000,2],[1591609451000,2],[1591609452000,2],[1591609453000,2],[1591609454000,2],[1591609455000,2],[1591609456000,2],[1591609457000,2],[1591609458000,2],[1591609459000,2],[1591609460000,2],[1591609461000,2],[1591609462000,2],[1591609463000,2],[1591609464000,2],[1591609465000,2],[1591609466000,2],[1591609467000,2],[1591609468000,2],[1591609469000,2],[1591609470000,2],[1591609471000,3],[1591609472000,3],[1591609473000,3],[1591609474000,3],[1591609475000,3],[1591609476000,3],[1591609477000,3],[1591609478000,3],[1591609479000,3],[1591609480000,3],[1591609481000,3],[1591609482000,3],[1591609483000,3],[1591609484000,3],[1591609485000,3],[1591609486000,3],[1591609487000,3],[1591609488000,3],[1591609489000,3],[1591609490000,3],[1591609491000,3],[1591609492000,3],[1591609493000,3],[1591609494000,3],[1591609495000,3],[1591609496000,4],[1591609497000,4],[1591609498000,4],[1591609499000,4],[1591609500000,4],[1591609501000,4],[1591609502000,4],[1591609503000,4],[1591609504000,4],[1591609505000,4],[1591609506000,4],[1591609507000,4],[1591609508000,4],[1591609509000,4],[1591609510000,4],[1591609511000,4],[1591609512000,4],[1591609513000,4],[1591609514000,4],[1591609515000,4],[1591609516000,4],[1591609517000,4],[1591609518000,4],[1591609519000,4],[1591609520000,5],[1591609521000,5],[1591609522000,5],[1591609523000,5],[1591609524000,5],[1591609525000,5],[1591609526000,5],[1591609527000,5],[1591609528000,5],[1591609529000,5],[1591609530000,5],[1591609531000,5],[1591609532000,5],[1591609533000,5],[1591609534000,5],[1591609535000,5],[1591609536000,5],[1591609537000,5],[1591609538000,5],[1591609539000,5],[1591609540000,5],[1591609541000,5],[1591609542000,5],[1591609543000,5],[1591609544000,5],[1591609545000,5],[1591609546000,5],[1591609547000,5],[1591609548000,5],[1591609549000,5],[1591609550000,5],[1591609551000,5],[1591609552000,5],[1591609553000,5],[1591609554000,5],[1591609555000,5],[1591609556000,5],[1591609557000,5],[1591609558000,5],[1591609559000,5],[1591609560000,5],[1591609561000,5],[1591609562000,5],[1591609563000,5],[1591609564000,5],[1591609565000,5],[1591609566000,5],[1591609567000,5],[1591609568000,5],[1591609569000,5],[1591609570000,5],[1591609571000,5],[1591609572000,5],[1591609573000,5],[1591609574000,5],[1591609575000,5],[1591609576000,5],[1591609577000,5],[1591609578000,5],[1591609579000,5],[1591609580000,5],[1591609581000,5],[1591609582000,5],[1591609583000,5],[1591609584000,5],[1591609585000,5],[1591609586000,5],[1591609587000,5],[1591609588000,5],[1591609589000,5],[1591609590000,5],[1591609591000,5],[1591609592000,5],[1591609593000,5],[1591609594000,5],[1591609595000,5],[1591609596000,5],[1591609597000,5],[1591609598000,5],[1591609599000,5],[1591609600000,5],[1591609601000,5],[1591609602000,5],[1591609603000,5],[1591609604000,5],[1591609605000,5],[1591609606000,5],[1591609607000,5],[1591609608000,5],[1591609609000,5],[1591609610000,5],[1591609611000,5],[1591609612000,5],[1591609613000,5],[1591609614000,5],[1591609615000,5],[1591609616000,5],[1591609617000,5],[1591609618000,5],[1591609619000,5],[1591609620000,5],[1591609621000,5],[1591609622000,5],[1591609623000,5],[1591609624000,5],[1591609625000,5],[1591609626000,5],[1591609627000,5],[1591609628000,5],[1591609629000,5],[1591609630000,5],[1591609631000,5],[1591609632000,5],[1591609633000,5],[1591609634000,5],[1591609635000,5],[1591609636000,5],[1591609637000,5],[1591609638000,5],[1591609639000,5],[1591609640000,5],[1591609641000,5],[1591609642000,5],[1591609643000,5],[1591609644000,5],[1591609645000,5],[1591609646000,5],[1591609647000,5],[1591609648000,5],[1591609649000,5],[1591609650000,5],[1591609651000,5],[1591609652000,5],[1591609653000,5],[1591609654000,5],[1591609655000,5],[1591609656000,5],[1591609657000,5],[1591609658000,5],[1591609659000,5],[1591609660000,5],[1591609661000,5],[1591609662000,5],[1591609663000,5],[1591609664000,5],[1591609665000,5],[1591609666000,5],[1591609667000,5],[1591609668000,5],[1591609669000,5],[1591609670000,5],[1591609671000,5],[1591609672000,5],[1591609673000,5],[1591609674000,5],[1591609675000,5],[1591609676000,5],[1591609677000,5],[1591609678000,5],[1591609679000,5],[1591609680000,5],[1591609681000,5],[1591609682000,5],[1591609683000,5],[1591609684000,5],[1591609685000,5],[1591609686000,5],[1591609687000,5],[1591609688000,5],[1591609689000,5],[1591609690000,5],[1591609691000,5],[1591609692000,5],[1591609693000,5],[1591609694000,5],[1591609695000,5],[1591609696000,5],[1591609697000,5],[1591609698000,5],[1591609699000,5],[1591609700000,5],[1591609701000,5],[1591609702000,5],[1591609703000,5],[1591609704000,5],[1591609705000,5],[1591609706000,5],[1591609707000,5],[1591609708000,5],[1591609709000,5],[1591609710000,5],[1591609711000,5],[1591609712000,5],[1591609713000,5],[1591609714000,5],[1591609715000,5],[1591609716000,5],[1591609717000,5],[1591609718000,5],[1591609719000,5],[1591609720000,5],[1591609721000,5],[1591609722000,5],[1591609723000,5],[1591609724000,5],[1591609725000,4],[1591609726000,4],[1591609727000,4],[1591609728000,4],[1591609729000,4],[1591609730000,4],[1591609731000,4],[1591609732000,4],[1591609733000,4],[1591609734000,4],[1591609735000,4],[1591609736000,4],[1591609737000,4],[1591609738000,4],[1591609739000,4],[1591609740000,4],[1591609741000,4],[1591609742000,4],[1591609743000,4],[1591609744000,4],[1591609745000,4],[1591609746000,4],[1591609747000,4],[1591609748000,4],[1591609749000,3],[1591609750000,3],[1591609751000,3],[1591609752000,3],[1591609753000,3],[1591609754000,3],[1591609755000,3],[1591609756000,3],[1591609758000,3],[1591609759000,3],[1591609760000,3],[1591609761000,3],[1591609762000,3],[1591609763000,3],[1591609764000,3],[1591609765000,3],[1591609766000,3],[1591609767000,3],[1591609768000,3],[1591609769000,3],[1591609770000,3],[1591609771000,3],[1591609772000,3],[1591609773000,3],[1591609774000,2],[1591609775000,2],[1591609776000,2],[1591609777000,2],[1591609778000,2],[1591609779000,2],[1591609780000,2],[1591609781000,2],[1591609782000,2],[1591609783000,2],[1591609784000,2],[1591609785000,2],[1591609786000,2],[1591609787000,2],[1591609788000,2],[1591609789000,2],[1591609790000,2],[1591609791000,2],[1591609792000,2],[1591609793000,2],[1591609794000,2],[1591609795000,2],[1591609796000,2],[1591609797000,2],[1591609798000,1],[1591609799000,1],[1591609800000,1],[1591609801000,1],[1591609802000,1],[1591609803000,1],[1591609804000,1],[1591609805000,1],[1591609806000,1],[1591609807000,1],[1591609808000,1],[1591609809000,1],[1591609810000,1],[1591609811000,1],[1591609812000,1],[1591609813000,1],[1591609814000,1],[1591609815000,1],[1591609816000,1],[1591609817000,1],[1591609818000,1],[1591609819000,1],[1591609820000,1]\n" +
                            "                    ],\n" +
                            "                    tooltip: { yDecimals: 0, ySuffix: '', valueDecimals: 0 }},\n" +
                            "\n" +
                            "                allUsersData\n" +
                            "            ]";
                    Pattern pattern = Pattern.compile("data: \\[(.*?)tooltip", Pattern.DOTALL);

                    Matcher matcher = pattern.matcher(series);
                    ArrayList<String> userTimesList = new ArrayList();
                    ArrayList<String> usersList = new ArrayList();
                    String string1 = "";
                    while (matcher.find()) {
                        System.out.println(matcher.group(1));
                        string1 = matcher.group(1);
                        System.out.println(string1);
                    }

                    for (String s : string1.split("\\[(.*?)")) {
                        userTimesList.add(s.substring(0, s.length() - 2)); //remove ] and comma
                    }

                    int i = 0;
                    for (String s : userTimesList) {
                        if (i != 0) { //First item is messed up because of line break so removing it from the list as it's not a number
                            usersList.add(s.split(",")[1]);
                        }
                        i++;
                    }

                    Collections.sort(usersList);

                    String numUsers = usersList.get(usersList.size() - 1);

                    System.out.println(numUsers);
                }
            }


        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


//For the time duration

//    public static void main(String[] args) {
//        try {
//            Document document =
//                    Jsoup.parse(new File("/Users/camposf/IdeaProjects/gatling_tool/index2.html"), "utf-8");
//            Elements scriptElements = document.getElementsByTag("script");
//
//            for (Element element : scriptElements) {
//                for (DataNode node : element.dataNodes()) {
//                    String wholeData = node.getWholeData();
////                    System.out.println(node.getWholeData());
//
//
//                    String str = "var timestamp = 1591609422149;";
//                    Pattern pattern = Pattern.compile("var timestamp = (.*?);", Pattern.DOTALL);
//
//                    Matcher matcher = pattern.matcher(wholeData);
//                    while (matcher.find()) {
//                        System.out.println(matcher.group(1));
//                    }
//
//                }
//            }
//
//
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }
//}
